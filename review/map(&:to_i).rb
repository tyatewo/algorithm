N, M = gets.chomp.split.map(&:to_i)

#N=参加人数, M=試合数。１行に複数の入力を受け入れている為ブロック扱いになる？
#mapはブロック付きメソッド
#map{ |num| num.to_i }を簡単に書くとmap(&:to_i)こうなる
#メソッドとはオブジェクト（もの）がどういう動きをするかを定義したもの
#オブジェクト指向は「モノ（どんな奴でどう動く）」に注目した考え方
#オブジェクトはモノ
#モノは属性（どんな奴）と操作（どう動ける）を持ってる
#モノ（オブジェクト）：ちゃー
#どんな奴（メンバ変数）：のんびり屋、食べるの好き、寝るの好き
#どう動ける（メソッド）：食べる、寝る、遊ぶ
#
#メソッドからメソッドにブロックを渡す際は
#自動的にブロックをProcオブジェクトに変換され
#変数として受け取り次のメソッドに渡す処理が行われている
#
#
#メソッド→メソッドに引数（入力されたもの）を渡すとき
#引数が自動的にProcオブジェクトに変換されて渡される？？

game = Array.new(N) { Array.new(N, '-')}
#多次元配列を作る
#new(size) 長さ size の配列を生成
#3の場合３つ分の配列を作成する
#多次元配列の書き方

M.times do
#Mは試合数
#timesはself回繰り返す。この場合試合数であるM回繰り返すことになる。
#self が正の整数でない場合は何もしない。
  a, b = gets.chomp.split.map(&:to_i)
#mapはブロック付きメソッド
#map{ |num| num.to_i }を簡潔に書いたもの
  game[a - 1][b - 1] = 'o'
  game[b - 1][a - 1] = '×'
#a（左）は勝った人の番号。b（右）は負けた人の番号
#a(左)にある数字が右にあれば×にする
#受け取った並びで左右が入れ替わったら×
#入力を受け取って数字の並び順をみて〇か×かを決める
end

N.times do |i|
#N（参加人数）人を一人ずつ取り出す
  puts game[i].join('')
 end
#その人[i]の試合を半角スペースで繋げる
#
#
