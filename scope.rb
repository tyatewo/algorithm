x = 10

if x == 5
  y = 10
  puts x + y

  # 「y = "hello"」のように同じブロックに変数yを再宣言することはできません
end

if x == 10
  y = "hello" # 別のブロックであるため、変数yを再宣言することができます
  puts x.to_s + y
end

#上段のyにはhelloは代入されない。


# 問題文
# A君はたこ焼きの情報を処理するプログラムを書いています。
# このプログラムは以下の2パターンの入力を処理します。

# パターン1
# 入力
# 1
# price
# N
# 1行目で、パターンを表す整数1が入力されます。
# 2行目で、たこ焼き1個あたりの値段
# priceが入力されます。
# 3行目で、たこ焼き1セットあたりの個数
# Nが入力されます。

# 出力
# たこ焼き1セットあたりの値段(
# =N×price)を出力します。

# パターン2
# 入力
# 2
# text
# price
# N
# 1行目で、パターンを表す整数2が入力されます。
# 2行目で、たこ焼きセットの説明文
# textが入力されます。
# 3行目で、たこ焼き1個あたりの値段
# priceが入力されます。
# 4行目で、たこ焼き1セットあたりの個数
# Nが入力されます。

# 出力
# 1行目で、たこ焼きセットの説明文
# textの末尾に!をつけて出力します。
# 2行目で、たこ焼き1セット辺りの値段(
# =N×price)を出力します。

p = gets.chomp.to_i
price = gets.chomp.to_i
N = gets.chomp.to_i


# パターン2
if p == 2
  text = gets.chomp
  puts text + "!"
end


puts price * N


# 入力例
# 2
# good!
# 30
# 8

# 出力例
# Copy
# good!!
# 240


# 入力例2
# 2
# umai
# 150
# 3
# 出力例2
# umai!
# 450


# 入力例3
# 1
# 80
# 5
# 出力例3
# 400



# p = gets.chomp.to_i：整数型の変数pにユーザーからの入力を受け取ります。getsメソッドを使って入力を受け取り、chompメソッドを用いて改行文字を削除し、to_iメソッドを使って文字列を整数に変換します。

# if p == 2：もし変数pが2と等しい場合は、以下のブロックの処理を実行します。これはパターン2を表しています。

# text = gets.chomp：文字列型の変数textにユーザーからの入力を受け取ります。改行文字を削除して文字列として保持します。

# puts text + "!"：変数textに"!"を連結させた結果を表示します。これにより、たこ焼きセットの説明文が出力されます。

# price = gets.chomp.to_i：整数型の変数priceにユーザーからの入力を受け取ります。文字列を整数に変換して保持します。

# N = gets.chomp.to_i：整数型の変数Nにユーザーからの入力を受け取ります。文字列を整数に変換して保持します。

# puts price * N：変数priceと変数Nを掛け算して、たこ焼き1セットの値段を計算します。その結果を表示します。

# このRubyのプログラムでは、ユーザーからの入力を受け取りながら、与えられたパターンに基づいて適切な処理を行います。パターン1では、たこ焼き1セットの値段を計算し、パターン2ではたこ焼きセットの説明文と値段を計算して表示します。